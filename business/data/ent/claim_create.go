// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"com.cross-join.crossviewer.authservice/business/data/ent/claim"
	"com.cross-join.crossviewer.authservice/business/data/ent/user"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClaimCreate is the builder for creating a Claim entity.
type ClaimCreate struct {
	config
	mutation *ClaimMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (cc *ClaimCreate) SetUserID(i int) *ClaimCreate {
	cc.mutation.SetUserID(i)
	return cc
}

// SetService sets the "service" field.
func (cc *ClaimCreate) SetService(s string) *ClaimCreate {
	cc.mutation.SetService(s)
	return cc
}

// SetClaims sets the "claims" field.
func (cc *ClaimCreate) SetClaims(s string) *ClaimCreate {
	cc.mutation.SetClaims(s)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ClaimCreate) SetCreatedAt(t time.Time) *ClaimCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ClaimCreate) SetNillableCreatedAt(t *time.Time) *ClaimCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ClaimCreate) SetUpdatedAt(t time.Time) *ClaimCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ClaimCreate) SetNillableUpdatedAt(t *time.Time) *ClaimCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ClaimCreate) SetID(i int) *ClaimCreate {
	cc.mutation.SetID(i)
	return cc
}

// SetUser sets the "user" edge to the User entity.
func (cc *ClaimCreate) SetUser(u *User) *ClaimCreate {
	return cc.SetUserID(u.ID)
}

// Mutation returns the ClaimMutation object of the builder.
func (cc *ClaimCreate) Mutation() *ClaimMutation {
	return cc.mutation
}

// Save creates the Claim in the database.
func (cc *ClaimCreate) Save(ctx context.Context) (*Claim, error) {
	cc.defaults()
	return withHooks[*Claim, ClaimMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClaimCreate) SaveX(ctx context.Context) *Claim {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ClaimCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ClaimCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ClaimCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := claim.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := claim.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClaimCreate) check() error {
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Claim.user_id"`)}
	}
	if _, ok := cc.mutation.Service(); !ok {
		return &ValidationError{Name: "service", err: errors.New(`ent: missing required field "Claim.service"`)}
	}
	if _, ok := cc.mutation.Claims(); !ok {
		return &ValidationError{Name: "claims", err: errors.New(`ent: missing required field "Claim.claims"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Claim.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Claim.updated_at"`)}
	}
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Claim.user"`)}
	}
	return nil
}

func (cc *ClaimCreate) sqlSave(ctx context.Context) (*Claim, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ClaimCreate) createSpec() (*Claim, *sqlgraph.CreateSpec) {
	var (
		_node = &Claim{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(claim.Table, sqlgraph.NewFieldSpec(claim.FieldID, field.TypeInt))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Service(); ok {
		_spec.SetField(claim.FieldService, field.TypeString, value)
		_node.Service = value
	}
	if value, ok := cc.mutation.Claims(); ok {
		_spec.SetField(claim.FieldClaims, field.TypeString, value)
		_node.Claims = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(claim.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(claim.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   claim.UserTable,
			Columns: []string{claim.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClaimCreateBulk is the builder for creating many Claim entities in bulk.
type ClaimCreateBulk struct {
	config
	builders []*ClaimCreate
}

// Save creates the Claim entities in the database.
func (ccb *ClaimCreateBulk) Save(ctx context.Context) ([]*Claim, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Claim, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClaimMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClaimCreateBulk) SaveX(ctx context.Context) []*Claim {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ClaimCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ClaimCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
