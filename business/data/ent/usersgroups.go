// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"com.cross-join.crossviewer.authservice/business/data/ent/group"
	"com.cross-join.crossviewer.authservice/business/data/ent/user"
	"com.cross-join.crossviewer.authservice/business/data/ent/usersgroups"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UsersGroups is the model entity for the UsersGroups schema.
type UsersGroups struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID int `json:"group_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UsersGroupsQuery when eager-loading is set.
	Edges        UsersGroupsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UsersGroupsEdges holds the relations/edges for other nodes in the graph.
type UsersGroupsEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Roles holds the value of the roles edge.
	Roles *Group `json:"roles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UsersGroupsEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UsersGroupsEdges) RolesOrErr() (*Group, error) {
	if e.loadedTypes[1] {
		if e.Roles == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: group.Label}
		}
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UsersGroups) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usersgroups.FieldID, usersgroups.FieldUserID, usersgroups.FieldGroupID:
			values[i] = new(sql.NullInt64)
		case usersgroups.FieldCreatedAt, usersgroups.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UsersGroups fields.
func (ug *UsersGroups) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usersgroups.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ug.ID = int(value.Int64)
		case usersgroups.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ug.UserID = int(value.Int64)
			}
		case usersgroups.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				ug.GroupID = int(value.Int64)
			}
		case usersgroups.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ug.CreatedAt = value.Time
			}
		case usersgroups.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ug.UpdatedAt = value.Time
			}
		default:
			ug.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UsersGroups.
// This includes values selected through modifiers, order, etc.
func (ug *UsersGroups) Value(name string) (ent.Value, error) {
	return ug.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UsersGroups entity.
func (ug *UsersGroups) QueryUser() *UserQuery {
	return NewUsersGroupsClient(ug.config).QueryUser(ug)
}

// QueryRoles queries the "roles" edge of the UsersGroups entity.
func (ug *UsersGroups) QueryRoles() *GroupQuery {
	return NewUsersGroupsClient(ug.config).QueryRoles(ug)
}

// Update returns a builder for updating this UsersGroups.
// Note that you need to call UsersGroups.Unwrap() before calling this method if this UsersGroups
// was returned from a transaction, and the transaction was committed or rolled back.
func (ug *UsersGroups) Update() *UsersGroupsUpdateOne {
	return NewUsersGroupsClient(ug.config).UpdateOne(ug)
}

// Unwrap unwraps the UsersGroups entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ug *UsersGroups) Unwrap() *UsersGroups {
	_tx, ok := ug.config.driver.(*txDriver)
	if !ok {
		panic("ent: UsersGroups is not a transactional entity")
	}
	ug.config.driver = _tx.drv
	return ug
}

// String implements the fmt.Stringer.
func (ug *UsersGroups) String() string {
	var builder strings.Builder
	builder.WriteString("UsersGroups(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ug.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ug.UserID))
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", ug.GroupID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ug.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ug.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UsersGroupsSlice is a parsable slice of UsersGroups.
type UsersGroupsSlice []*UsersGroups
