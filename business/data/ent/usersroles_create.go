// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"com.cross-join.crossviewer.authservice/business/data/ent/role"
	"com.cross-join.crossviewer.authservice/business/data/ent/user"
	"com.cross-join.crossviewer.authservice/business/data/ent/usersroles"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UsersRolesCreate is the builder for creating a UsersRoles entity.
type UsersRolesCreate struct {
	config
	mutation *UsersRolesMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (urc *UsersRolesCreate) SetUserID(i int) *UsersRolesCreate {
	urc.mutation.SetUserID(i)
	return urc
}

// SetRoleID sets the "role_id" field.
func (urc *UsersRolesCreate) SetRoleID(i int) *UsersRolesCreate {
	urc.mutation.SetRoleID(i)
	return urc
}

// SetCreatedAt sets the "created_at" field.
func (urc *UsersRolesCreate) SetCreatedAt(t time.Time) *UsersRolesCreate {
	urc.mutation.SetCreatedAt(t)
	return urc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (urc *UsersRolesCreate) SetNillableCreatedAt(t *time.Time) *UsersRolesCreate {
	if t != nil {
		urc.SetCreatedAt(*t)
	}
	return urc
}

// SetUpdatedAt sets the "updated_at" field.
func (urc *UsersRolesCreate) SetUpdatedAt(t time.Time) *UsersRolesCreate {
	urc.mutation.SetUpdatedAt(t)
	return urc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (urc *UsersRolesCreate) SetNillableUpdatedAt(t *time.Time) *UsersRolesCreate {
	if t != nil {
		urc.SetUpdatedAt(*t)
	}
	return urc
}

// SetUser sets the "user" edge to the User entity.
func (urc *UsersRolesCreate) SetUser(u *User) *UsersRolesCreate {
	return urc.SetUserID(u.ID)
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (urc *UsersRolesCreate) SetRolesID(id int) *UsersRolesCreate {
	urc.mutation.SetRolesID(id)
	return urc
}

// SetRoles sets the "roles" edge to the Role entity.
func (urc *UsersRolesCreate) SetRoles(r *Role) *UsersRolesCreate {
	return urc.SetRolesID(r.ID)
}

// Mutation returns the UsersRolesMutation object of the builder.
func (urc *UsersRolesCreate) Mutation() *UsersRolesMutation {
	return urc.mutation
}

// Save creates the UsersRoles in the database.
func (urc *UsersRolesCreate) Save(ctx context.Context) (*UsersRoles, error) {
	urc.defaults()
	return withHooks[*UsersRoles, UsersRolesMutation](ctx, urc.sqlSave, urc.mutation, urc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (urc *UsersRolesCreate) SaveX(ctx context.Context) *UsersRoles {
	v, err := urc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urc *UsersRolesCreate) Exec(ctx context.Context) error {
	_, err := urc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urc *UsersRolesCreate) ExecX(ctx context.Context) {
	if err := urc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (urc *UsersRolesCreate) defaults() {
	if _, ok := urc.mutation.CreatedAt(); !ok {
		v := usersroles.DefaultCreatedAt()
		urc.mutation.SetCreatedAt(v)
	}
	if _, ok := urc.mutation.UpdatedAt(); !ok {
		v := usersroles.DefaultUpdatedAt()
		urc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (urc *UsersRolesCreate) check() error {
	if _, ok := urc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UsersRoles.user_id"`)}
	}
	if _, ok := urc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "UsersRoles.role_id"`)}
	}
	if _, ok := urc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UsersRoles.created_at"`)}
	}
	if _, ok := urc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UsersRoles.updated_at"`)}
	}
	if _, ok := urc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UsersRoles.user"`)}
	}
	if _, ok := urc.mutation.RolesID(); !ok {
		return &ValidationError{Name: "roles", err: errors.New(`ent: missing required edge "UsersRoles.roles"`)}
	}
	return nil
}

func (urc *UsersRolesCreate) sqlSave(ctx context.Context) (*UsersRoles, error) {
	if err := urc.check(); err != nil {
		return nil, err
	}
	_node, _spec := urc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	urc.mutation.id = &_node.ID
	urc.mutation.done = true
	return _node, nil
}

func (urc *UsersRolesCreate) createSpec() (*UsersRoles, *sqlgraph.CreateSpec) {
	var (
		_node = &UsersRoles{config: urc.config}
		_spec = sqlgraph.NewCreateSpec(usersroles.Table, sqlgraph.NewFieldSpec(usersroles.FieldID, field.TypeInt))
	)
	if value, ok := urc.mutation.CreatedAt(); ok {
		_spec.SetField(usersroles.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := urc.mutation.UpdatedAt(); ok {
		_spec.SetField(usersroles.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := urc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersroles.UserTable,
			Columns: []string{usersroles.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := urc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersroles.RolesTable,
			Columns: []string{usersroles.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UsersRolesCreateBulk is the builder for creating many UsersRoles entities in bulk.
type UsersRolesCreateBulk struct {
	config
	builders []*UsersRolesCreate
}

// Save creates the UsersRoles entities in the database.
func (urcb *UsersRolesCreateBulk) Save(ctx context.Context) ([]*UsersRoles, error) {
	specs := make([]*sqlgraph.CreateSpec, len(urcb.builders))
	nodes := make([]*UsersRoles, len(urcb.builders))
	mutators := make([]Mutator, len(urcb.builders))
	for i := range urcb.builders {
		func(i int, root context.Context) {
			builder := urcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsersRolesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, urcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, urcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, urcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (urcb *UsersRolesCreateBulk) SaveX(ctx context.Context) []*UsersRoles {
	v, err := urcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urcb *UsersRolesCreateBulk) Exec(ctx context.Context) error {
	_, err := urcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urcb *UsersRolesCreateBulk) ExecX(ctx context.Context) {
	if err := urcb.Exec(ctx); err != nil {
		panic(err)
	}
}
