// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFullName holds the string denoting the fullname field in the database.
	FieldFullName = "full_name"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldPreferences holds the string denoting the preferences field in the database.
	FieldPreferences = "preferences"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgeClaims holds the string denoting the claims edge name in mutations.
	EdgeClaims = "claims"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// EdgeAuthUsersRoles holds the string denoting the auth_users_roles edge name in mutations.
	EdgeAuthUsersRoles = "auth_users_roles"
	// EdgeAuthUsersGroups holds the string denoting the auth_users_groups edge name in mutations.
	EdgeAuthUsersGroups = "auth_users_groups"
	// Table holds the table name of the user in the database.
	Table = "auth_users"
	// RolesTable is the table that holds the roles relation/edge. The primary key declared below.
	RolesTable = "auth_users_roles"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "auth_roles"
	// ClaimsTable is the table that holds the claims relation/edge.
	ClaimsTable = "auth_claims"
	// ClaimsInverseTable is the table name for the Claim entity.
	// It exists in this package in order to avoid circular dependency with the "claim" package.
	ClaimsInverseTable = "auth_claims"
	// ClaimsColumn is the table column denoting the claims relation/edge.
	ClaimsColumn = "user_id"
	// GroupsTable is the table that holds the groups relation/edge. The primary key declared below.
	GroupsTable = "auth_users_groups"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "auth_groups"
	// AuthUsersRolesTable is the table that holds the auth_users_roles relation/edge.
	AuthUsersRolesTable = "auth_users_roles"
	// AuthUsersRolesInverseTable is the table name for the UsersRoles entity.
	// It exists in this package in order to avoid circular dependency with the "usersroles" package.
	AuthUsersRolesInverseTable = "auth_users_roles"
	// AuthUsersRolesColumn is the table column denoting the auth_users_roles relation/edge.
	AuthUsersRolesColumn = "user_id"
	// AuthUsersGroupsTable is the table that holds the auth_users_groups relation/edge.
	AuthUsersGroupsTable = "auth_users_groups"
	// AuthUsersGroupsInverseTable is the table name for the UsersGroups entity.
	// It exists in this package in order to avoid circular dependency with the "usersgroups" package.
	AuthUsersGroupsInverseTable = "auth_users_groups"
	// AuthUsersGroupsColumn is the table column denoting the auth_users_groups relation/edge.
	AuthUsersGroupsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldFullName,
	FieldUsername,
	FieldEmail,
	FieldHash,
	FieldPreferences,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// RolesPrimaryKey and RolesColumn2 are the table columns denoting the
	// primary key for the roles relation (M2M).
	RolesPrimaryKey = []string{"user_id", "role_id"}
	// GroupsPrimaryKey and GroupsColumn2 are the table columns denoting the
	// primary key for the groups relation (M2M).
	GroupsPrimaryKey = []string{"user_id", "group_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFullName orders the results by the fullName field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// ByPreferences orders the results by the preferences field.
func ByPreferences(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreferences, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRolesCount orders the results by roles count.
func ByRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolesStep(), opts...)
	}
}

// ByRoles orders the results by roles terms.
func ByRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClaimsCount orders the results by claims count.
func ByClaimsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClaimsStep(), opts...)
	}
}

// ByClaims orders the results by claims terms.
func ByClaims(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClaimsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupsCount orders the results by groups count.
func ByGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupsStep(), opts...)
	}
}

// ByGroups orders the results by groups terms.
func ByGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuthUsersRolesCount orders the results by auth_users_roles count.
func ByAuthUsersRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthUsersRolesStep(), opts...)
	}
}

// ByAuthUsersRoles orders the results by auth_users_roles terms.
func ByAuthUsersRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthUsersRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuthUsersGroupsCount orders the results by auth_users_groups count.
func ByAuthUsersGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthUsersGroupsStep(), opts...)
	}
}

// ByAuthUsersGroups orders the results by auth_users_groups terms.
func ByAuthUsersGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthUsersGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
	)
}
func newClaimsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClaimsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ClaimsTable, ClaimsColumn),
	)
}
func newGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, GroupsTable, GroupsPrimaryKey...),
	)
}
func newAuthUsersRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthUsersRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AuthUsersRolesTable, AuthUsersRolesColumn),
	)
}
func newAuthUsersGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthUsersGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AuthUsersGroupsTable, AuthUsersGroupsColumn),
	)
}
