// Code generated by ent, DO NOT EDIT.

package claim

import (
	"time"

	"com.cross-join.crossviewer.authservice/business/data/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Claim {
	return predicate.Claim(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Claim {
	return predicate.Claim(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Claim {
	return predicate.Claim(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Claim {
	return predicate.Claim(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Claim {
	return predicate.Claim(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Claim {
	return predicate.Claim(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Claim {
	return predicate.Claim(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Claim {
	return predicate.Claim(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Claim {
	return predicate.Claim(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Claim {
	return predicate.Claim(sql.FieldEQ(FieldUserID, v))
}

// Service applies equality check predicate on the "service" field. It's identical to ServiceEQ.
func Service(v string) predicate.Claim {
	return predicate.Claim(sql.FieldEQ(FieldService, v))
}

// Claims applies equality check predicate on the "claims" field. It's identical to ClaimsEQ.
func Claims(v string) predicate.Claim {
	return predicate.Claim(sql.FieldEQ(FieldClaims, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Claim {
	return predicate.Claim(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Claim {
	return predicate.Claim(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Claim {
	return predicate.Claim(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Claim {
	return predicate.Claim(sql.FieldNotIn(FieldUserID, vs...))
}

// ServiceEQ applies the EQ predicate on the "service" field.
func ServiceEQ(v string) predicate.Claim {
	return predicate.Claim(sql.FieldEQ(FieldService, v))
}

// ServiceNEQ applies the NEQ predicate on the "service" field.
func ServiceNEQ(v string) predicate.Claim {
	return predicate.Claim(sql.FieldNEQ(FieldService, v))
}

// ServiceIn applies the In predicate on the "service" field.
func ServiceIn(vs ...string) predicate.Claim {
	return predicate.Claim(sql.FieldIn(FieldService, vs...))
}

// ServiceNotIn applies the NotIn predicate on the "service" field.
func ServiceNotIn(vs ...string) predicate.Claim {
	return predicate.Claim(sql.FieldNotIn(FieldService, vs...))
}

// ServiceGT applies the GT predicate on the "service" field.
func ServiceGT(v string) predicate.Claim {
	return predicate.Claim(sql.FieldGT(FieldService, v))
}

// ServiceGTE applies the GTE predicate on the "service" field.
func ServiceGTE(v string) predicate.Claim {
	return predicate.Claim(sql.FieldGTE(FieldService, v))
}

// ServiceLT applies the LT predicate on the "service" field.
func ServiceLT(v string) predicate.Claim {
	return predicate.Claim(sql.FieldLT(FieldService, v))
}

// ServiceLTE applies the LTE predicate on the "service" field.
func ServiceLTE(v string) predicate.Claim {
	return predicate.Claim(sql.FieldLTE(FieldService, v))
}

// ServiceContains applies the Contains predicate on the "service" field.
func ServiceContains(v string) predicate.Claim {
	return predicate.Claim(sql.FieldContains(FieldService, v))
}

// ServiceHasPrefix applies the HasPrefix predicate on the "service" field.
func ServiceHasPrefix(v string) predicate.Claim {
	return predicate.Claim(sql.FieldHasPrefix(FieldService, v))
}

// ServiceHasSuffix applies the HasSuffix predicate on the "service" field.
func ServiceHasSuffix(v string) predicate.Claim {
	return predicate.Claim(sql.FieldHasSuffix(FieldService, v))
}

// ServiceEqualFold applies the EqualFold predicate on the "service" field.
func ServiceEqualFold(v string) predicate.Claim {
	return predicate.Claim(sql.FieldEqualFold(FieldService, v))
}

// ServiceContainsFold applies the ContainsFold predicate on the "service" field.
func ServiceContainsFold(v string) predicate.Claim {
	return predicate.Claim(sql.FieldContainsFold(FieldService, v))
}

// ClaimsEQ applies the EQ predicate on the "claims" field.
func ClaimsEQ(v string) predicate.Claim {
	return predicate.Claim(sql.FieldEQ(FieldClaims, v))
}

// ClaimsNEQ applies the NEQ predicate on the "claims" field.
func ClaimsNEQ(v string) predicate.Claim {
	return predicate.Claim(sql.FieldNEQ(FieldClaims, v))
}

// ClaimsIn applies the In predicate on the "claims" field.
func ClaimsIn(vs ...string) predicate.Claim {
	return predicate.Claim(sql.FieldIn(FieldClaims, vs...))
}

// ClaimsNotIn applies the NotIn predicate on the "claims" field.
func ClaimsNotIn(vs ...string) predicate.Claim {
	return predicate.Claim(sql.FieldNotIn(FieldClaims, vs...))
}

// ClaimsGT applies the GT predicate on the "claims" field.
func ClaimsGT(v string) predicate.Claim {
	return predicate.Claim(sql.FieldGT(FieldClaims, v))
}

// ClaimsGTE applies the GTE predicate on the "claims" field.
func ClaimsGTE(v string) predicate.Claim {
	return predicate.Claim(sql.FieldGTE(FieldClaims, v))
}

// ClaimsLT applies the LT predicate on the "claims" field.
func ClaimsLT(v string) predicate.Claim {
	return predicate.Claim(sql.FieldLT(FieldClaims, v))
}

// ClaimsLTE applies the LTE predicate on the "claims" field.
func ClaimsLTE(v string) predicate.Claim {
	return predicate.Claim(sql.FieldLTE(FieldClaims, v))
}

// ClaimsContains applies the Contains predicate on the "claims" field.
func ClaimsContains(v string) predicate.Claim {
	return predicate.Claim(sql.FieldContains(FieldClaims, v))
}

// ClaimsHasPrefix applies the HasPrefix predicate on the "claims" field.
func ClaimsHasPrefix(v string) predicate.Claim {
	return predicate.Claim(sql.FieldHasPrefix(FieldClaims, v))
}

// ClaimsHasSuffix applies the HasSuffix predicate on the "claims" field.
func ClaimsHasSuffix(v string) predicate.Claim {
	return predicate.Claim(sql.FieldHasSuffix(FieldClaims, v))
}

// ClaimsEqualFold applies the EqualFold predicate on the "claims" field.
func ClaimsEqualFold(v string) predicate.Claim {
	return predicate.Claim(sql.FieldEqualFold(FieldClaims, v))
}

// ClaimsContainsFold applies the ContainsFold predicate on the "claims" field.
func ClaimsContainsFold(v string) predicate.Claim {
	return predicate.Claim(sql.FieldContainsFold(FieldClaims, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Claim {
	return predicate.Claim(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Claim {
	return predicate.Claim(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Claim {
	return predicate.Claim(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Claim) predicate.Claim {
	return predicate.Claim(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Claim) predicate.Claim {
	return predicate.Claim(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Claim) predicate.Claim {
	return predicate.Claim(func(s *sql.Selector) {
		p(s.Not())
	})
}
