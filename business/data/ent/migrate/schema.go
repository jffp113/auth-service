// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AuthClaimsColumns holds the columns for the "auth_claims" table.
	AuthClaimsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "service", Type: field.TypeString},
		{Name: "claims", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
	}
	// AuthClaimsTable holds the schema information for the "auth_claims" table.
	AuthClaimsTable = &schema.Table{
		Name:       "auth_claims",
		Columns:    AuthClaimsColumns,
		PrimaryKey: []*schema.Column{AuthClaimsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "auth_claims_auth_users_user",
				Columns:    []*schema.Column{AuthClaimsColumns[5]},
				RefColumns: []*schema.Column{AuthUsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AuthGroupsColumns holds the columns for the "auth_groups" table.
	AuthGroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// AuthGroupsTable holds the schema information for the "auth_groups" table.
	AuthGroupsTable = &schema.Table{
		Name:       "auth_groups",
		Columns:    AuthGroupsColumns,
		PrimaryKey: []*schema.Column{AuthGroupsColumns[0]},
	}
	// AuthRolesColumns holds the columns for the "auth_roles" table.
	AuthRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// AuthRolesTable holds the schema information for the "auth_roles" table.
	AuthRolesTable = &schema.Table{
		Name:       "auth_roles",
		Columns:    AuthRolesColumns,
		PrimaryKey: []*schema.Column{AuthRolesColumns[0]},
	}
	// AuthUsersColumns holds the columns for the "auth_users" table.
	AuthUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "full_name", Type: field.TypeString},
		{Name: "username", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "hash", Type: field.TypeString},
		{Name: "preferences", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// AuthUsersTable holds the schema information for the "auth_users" table.
	AuthUsersTable = &schema.Table{
		Name:       "auth_users",
		Columns:    AuthUsersColumns,
		PrimaryKey: []*schema.Column{AuthUsersColumns[0]},
	}
	// AuthUsersGroupsColumns holds the columns for the "auth_users_groups" table.
	AuthUsersGroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "group_id", Type: field.TypeInt},
	}
	// AuthUsersGroupsTable holds the schema information for the "auth_users_groups" table.
	AuthUsersGroupsTable = &schema.Table{
		Name:       "auth_users_groups",
		Columns:    AuthUsersGroupsColumns,
		PrimaryKey: []*schema.Column{AuthUsersGroupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "auth_users_groups_auth_users_user",
				Columns:    []*schema.Column{AuthUsersGroupsColumns[3]},
				RefColumns: []*schema.Column{AuthUsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "auth_users_groups_auth_groups_roles",
				Columns:    []*schema.Column{AuthUsersGroupsColumns[4]},
				RefColumns: []*schema.Column{AuthGroupsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "usersgroups_user_id_group_id",
				Unique:  true,
				Columns: []*schema.Column{AuthUsersGroupsColumns[3], AuthUsersGroupsColumns[4]},
			},
		},
	}
	// AuthUsersRolesColumns holds the columns for the "auth_users_roles" table.
	AuthUsersRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "role_id", Type: field.TypeInt},
	}
	// AuthUsersRolesTable holds the schema information for the "auth_users_roles" table.
	AuthUsersRolesTable = &schema.Table{
		Name:       "auth_users_roles",
		Columns:    AuthUsersRolesColumns,
		PrimaryKey: []*schema.Column{AuthUsersRolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "auth_users_roles_auth_users_user",
				Columns:    []*schema.Column{AuthUsersRolesColumns[3]},
				RefColumns: []*schema.Column{AuthUsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "auth_users_roles_auth_roles_roles",
				Columns:    []*schema.Column{AuthUsersRolesColumns[4]},
				RefColumns: []*schema.Column{AuthRolesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "usersroles_user_id_role_id",
				Unique:  true,
				Columns: []*schema.Column{AuthUsersRolesColumns[3], AuthUsersRolesColumns[4]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AuthClaimsTable,
		AuthGroupsTable,
		AuthRolesTable,
		AuthUsersTable,
		AuthUsersGroupsTable,
		AuthUsersRolesTable,
	}
)

func init() {
	AuthClaimsTable.ForeignKeys[0].RefTable = AuthUsersTable
	AuthClaimsTable.Annotation = &entsql.Annotation{
		Table: "auth_claims",
	}
	AuthGroupsTable.Annotation = &entsql.Annotation{
		Table: "auth_groups",
	}
	AuthRolesTable.Annotation = &entsql.Annotation{
		Table: "auth_roles",
	}
	AuthUsersTable.Annotation = &entsql.Annotation{
		Table: "auth_users",
	}
	AuthUsersGroupsTable.ForeignKeys[0].RefTable = AuthUsersTable
	AuthUsersGroupsTable.ForeignKeys[1].RefTable = AuthGroupsTable
	AuthUsersGroupsTable.Annotation = &entsql.Annotation{
		Table: "auth_users_groups",
	}
	AuthUsersRolesTable.ForeignKeys[0].RefTable = AuthUsersTable
	AuthUsersRolesTable.ForeignKeys[1].RefTable = AuthRolesTable
	AuthUsersRolesTable.Annotation = &entsql.Annotation{
		Table: "auth_users_roles",
	}
}
