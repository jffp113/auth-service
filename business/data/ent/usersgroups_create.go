// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"com.cross-join.crossviewer.authservice/business/data/ent/group"
	"com.cross-join.crossviewer.authservice/business/data/ent/user"
	"com.cross-join.crossviewer.authservice/business/data/ent/usersgroups"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UsersGroupsCreate is the builder for creating a UsersGroups entity.
type UsersGroupsCreate struct {
	config
	mutation *UsersGroupsMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ugc *UsersGroupsCreate) SetUserID(i int) *UsersGroupsCreate {
	ugc.mutation.SetUserID(i)
	return ugc
}

// SetGroupID sets the "group_id" field.
func (ugc *UsersGroupsCreate) SetGroupID(i int) *UsersGroupsCreate {
	ugc.mutation.SetGroupID(i)
	return ugc
}

// SetCreatedAt sets the "created_at" field.
func (ugc *UsersGroupsCreate) SetCreatedAt(t time.Time) *UsersGroupsCreate {
	ugc.mutation.SetCreatedAt(t)
	return ugc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ugc *UsersGroupsCreate) SetNillableCreatedAt(t *time.Time) *UsersGroupsCreate {
	if t != nil {
		ugc.SetCreatedAt(*t)
	}
	return ugc
}

// SetUpdatedAt sets the "updated_at" field.
func (ugc *UsersGroupsCreate) SetUpdatedAt(t time.Time) *UsersGroupsCreate {
	ugc.mutation.SetUpdatedAt(t)
	return ugc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ugc *UsersGroupsCreate) SetNillableUpdatedAt(t *time.Time) *UsersGroupsCreate {
	if t != nil {
		ugc.SetUpdatedAt(*t)
	}
	return ugc
}

// SetUser sets the "user" edge to the User entity.
func (ugc *UsersGroupsCreate) SetUser(u *User) *UsersGroupsCreate {
	return ugc.SetUserID(u.ID)
}

// SetRolesID sets the "roles" edge to the Group entity by ID.
func (ugc *UsersGroupsCreate) SetRolesID(id int) *UsersGroupsCreate {
	ugc.mutation.SetRolesID(id)
	return ugc
}

// SetRoles sets the "roles" edge to the Group entity.
func (ugc *UsersGroupsCreate) SetRoles(g *Group) *UsersGroupsCreate {
	return ugc.SetRolesID(g.ID)
}

// Mutation returns the UsersGroupsMutation object of the builder.
func (ugc *UsersGroupsCreate) Mutation() *UsersGroupsMutation {
	return ugc.mutation
}

// Save creates the UsersGroups in the database.
func (ugc *UsersGroupsCreate) Save(ctx context.Context) (*UsersGroups, error) {
	ugc.defaults()
	return withHooks[*UsersGroups, UsersGroupsMutation](ctx, ugc.sqlSave, ugc.mutation, ugc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ugc *UsersGroupsCreate) SaveX(ctx context.Context) *UsersGroups {
	v, err := ugc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ugc *UsersGroupsCreate) Exec(ctx context.Context) error {
	_, err := ugc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ugc *UsersGroupsCreate) ExecX(ctx context.Context) {
	if err := ugc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ugc *UsersGroupsCreate) defaults() {
	if _, ok := ugc.mutation.CreatedAt(); !ok {
		v := usersgroups.DefaultCreatedAt()
		ugc.mutation.SetCreatedAt(v)
	}
	if _, ok := ugc.mutation.UpdatedAt(); !ok {
		v := usersgroups.DefaultUpdatedAt()
		ugc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ugc *UsersGroupsCreate) check() error {
	if _, ok := ugc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UsersGroups.user_id"`)}
	}
	if _, ok := ugc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "UsersGroups.group_id"`)}
	}
	if _, ok := ugc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UsersGroups.created_at"`)}
	}
	if _, ok := ugc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UsersGroups.updated_at"`)}
	}
	if _, ok := ugc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UsersGroups.user"`)}
	}
	if _, ok := ugc.mutation.RolesID(); !ok {
		return &ValidationError{Name: "roles", err: errors.New(`ent: missing required edge "UsersGroups.roles"`)}
	}
	return nil
}

func (ugc *UsersGroupsCreate) sqlSave(ctx context.Context) (*UsersGroups, error) {
	if err := ugc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ugc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ugc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ugc.mutation.id = &_node.ID
	ugc.mutation.done = true
	return _node, nil
}

func (ugc *UsersGroupsCreate) createSpec() (*UsersGroups, *sqlgraph.CreateSpec) {
	var (
		_node = &UsersGroups{config: ugc.config}
		_spec = sqlgraph.NewCreateSpec(usersgroups.Table, sqlgraph.NewFieldSpec(usersgroups.FieldID, field.TypeInt))
	)
	if value, ok := ugc.mutation.CreatedAt(); ok {
		_spec.SetField(usersgroups.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ugc.mutation.UpdatedAt(); ok {
		_spec.SetField(usersgroups.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ugc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersgroups.UserTable,
			Columns: []string{usersgroups.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ugc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersgroups.RolesTable,
			Columns: []string{usersgroups.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UsersGroupsCreateBulk is the builder for creating many UsersGroups entities in bulk.
type UsersGroupsCreateBulk struct {
	config
	builders []*UsersGroupsCreate
}

// Save creates the UsersGroups entities in the database.
func (ugcb *UsersGroupsCreateBulk) Save(ctx context.Context) ([]*UsersGroups, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ugcb.builders))
	nodes := make([]*UsersGroups, len(ugcb.builders))
	mutators := make([]Mutator, len(ugcb.builders))
	for i := range ugcb.builders {
		func(i int, root context.Context) {
			builder := ugcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsersGroupsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ugcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ugcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ugcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ugcb *UsersGroupsCreateBulk) SaveX(ctx context.Context) []*UsersGroups {
	v, err := ugcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ugcb *UsersGroupsCreateBulk) Exec(ctx context.Context) error {
	_, err := ugcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ugcb *UsersGroupsCreateBulk) ExecX(ctx context.Context) {
	if err := ugcb.Exec(ctx); err != nil {
		panic(err)
	}
}
