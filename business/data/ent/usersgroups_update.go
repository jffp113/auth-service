// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"com.cross-join.crossviewer.authService/business/data/ent/group"
	"com.cross-join.crossviewer.authService/business/data/ent/predicate"
	"com.cross-join.crossviewer.authService/business/data/ent/user"
	"com.cross-join.crossviewer.authService/business/data/ent/usersgroups"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UsersGroupsUpdate is the builder for updating UsersGroups entities.
type UsersGroupsUpdate struct {
	config
	hooks    []Hook
	mutation *UsersGroupsMutation
}

// Where appends a list predicates to the UsersGroupsUpdate builder.
func (ugu *UsersGroupsUpdate) Where(ps ...predicate.UsersGroups) *UsersGroupsUpdate {
	ugu.mutation.Where(ps...)
	return ugu
}

// SetUserID sets the "user_id" field.
func (ugu *UsersGroupsUpdate) SetUserID(i int) *UsersGroupsUpdate {
	ugu.mutation.SetUserID(i)
	return ugu
}

// SetGroupID sets the "group_id" field.
func (ugu *UsersGroupsUpdate) SetGroupID(i int) *UsersGroupsUpdate {
	ugu.mutation.SetGroupID(i)
	return ugu
}

// SetCreatedAt sets the "created_at" field.
func (ugu *UsersGroupsUpdate) SetCreatedAt(t time.Time) *UsersGroupsUpdate {
	ugu.mutation.SetCreatedAt(t)
	return ugu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ugu *UsersGroupsUpdate) SetNillableCreatedAt(t *time.Time) *UsersGroupsUpdate {
	if t != nil {
		ugu.SetCreatedAt(*t)
	}
	return ugu
}

// SetUpdatedAt sets the "updated_at" field.
func (ugu *UsersGroupsUpdate) SetUpdatedAt(t time.Time) *UsersGroupsUpdate {
	ugu.mutation.SetUpdatedAt(t)
	return ugu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ugu *UsersGroupsUpdate) SetNillableUpdatedAt(t *time.Time) *UsersGroupsUpdate {
	if t != nil {
		ugu.SetUpdatedAt(*t)
	}
	return ugu
}

// SetUser sets the "user" edge to the User entity.
func (ugu *UsersGroupsUpdate) SetUser(u *User) *UsersGroupsUpdate {
	return ugu.SetUserID(u.ID)
}

// SetRolesID sets the "roles" edge to the Group entity by ID.
func (ugu *UsersGroupsUpdate) SetRolesID(id int) *UsersGroupsUpdate {
	ugu.mutation.SetRolesID(id)
	return ugu
}

// SetRoles sets the "roles" edge to the Group entity.
func (ugu *UsersGroupsUpdate) SetRoles(g *Group) *UsersGroupsUpdate {
	return ugu.SetRolesID(g.ID)
}

// Mutation returns the UsersGroupsMutation object of the builder.
func (ugu *UsersGroupsUpdate) Mutation() *UsersGroupsMutation {
	return ugu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ugu *UsersGroupsUpdate) ClearUser() *UsersGroupsUpdate {
	ugu.mutation.ClearUser()
	return ugu
}

// ClearRoles clears the "roles" edge to the Group entity.
func (ugu *UsersGroupsUpdate) ClearRoles() *UsersGroupsUpdate {
	ugu.mutation.ClearRoles()
	return ugu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ugu *UsersGroupsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UsersGroupsMutation](ctx, ugu.sqlSave, ugu.mutation, ugu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ugu *UsersGroupsUpdate) SaveX(ctx context.Context) int {
	affected, err := ugu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ugu *UsersGroupsUpdate) Exec(ctx context.Context) error {
	_, err := ugu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ugu *UsersGroupsUpdate) ExecX(ctx context.Context) {
	if err := ugu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ugu *UsersGroupsUpdate) check() error {
	if _, ok := ugu.mutation.UserID(); ugu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UsersGroups.user"`)
	}
	if _, ok := ugu.mutation.RolesID(); ugu.mutation.RolesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UsersGroups.roles"`)
	}
	return nil
}

func (ugu *UsersGroupsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ugu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersgroups.Table, usersgroups.Columns, sqlgraph.NewFieldSpec(usersgroups.FieldID, field.TypeInt))
	if ps := ugu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ugu.mutation.CreatedAt(); ok {
		_spec.SetField(usersgroups.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ugu.mutation.UpdatedAt(); ok {
		_spec.SetField(usersgroups.FieldUpdatedAt, field.TypeTime, value)
	}
	if ugu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersgroups.UserTable,
			Columns: []string{usersgroups.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ugu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersgroups.UserTable,
			Columns: []string{usersgroups.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ugu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersgroups.RolesTable,
			Columns: []string{usersgroups.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ugu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersgroups.RolesTable,
			Columns: []string{usersgroups.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ugu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersgroups.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ugu.mutation.done = true
	return n, nil
}

// UsersGroupsUpdateOne is the builder for updating a single UsersGroups entity.
type UsersGroupsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UsersGroupsMutation
}

// SetUserID sets the "user_id" field.
func (uguo *UsersGroupsUpdateOne) SetUserID(i int) *UsersGroupsUpdateOne {
	uguo.mutation.SetUserID(i)
	return uguo
}

// SetGroupID sets the "group_id" field.
func (uguo *UsersGroupsUpdateOne) SetGroupID(i int) *UsersGroupsUpdateOne {
	uguo.mutation.SetGroupID(i)
	return uguo
}

// SetCreatedAt sets the "created_at" field.
func (uguo *UsersGroupsUpdateOne) SetCreatedAt(t time.Time) *UsersGroupsUpdateOne {
	uguo.mutation.SetCreatedAt(t)
	return uguo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uguo *UsersGroupsUpdateOne) SetNillableCreatedAt(t *time.Time) *UsersGroupsUpdateOne {
	if t != nil {
		uguo.SetCreatedAt(*t)
	}
	return uguo
}

// SetUpdatedAt sets the "updated_at" field.
func (uguo *UsersGroupsUpdateOne) SetUpdatedAt(t time.Time) *UsersGroupsUpdateOne {
	uguo.mutation.SetUpdatedAt(t)
	return uguo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uguo *UsersGroupsUpdateOne) SetNillableUpdatedAt(t *time.Time) *UsersGroupsUpdateOne {
	if t != nil {
		uguo.SetUpdatedAt(*t)
	}
	return uguo
}

// SetUser sets the "user" edge to the User entity.
func (uguo *UsersGroupsUpdateOne) SetUser(u *User) *UsersGroupsUpdateOne {
	return uguo.SetUserID(u.ID)
}

// SetRolesID sets the "roles" edge to the Group entity by ID.
func (uguo *UsersGroupsUpdateOne) SetRolesID(id int) *UsersGroupsUpdateOne {
	uguo.mutation.SetRolesID(id)
	return uguo
}

// SetRoles sets the "roles" edge to the Group entity.
func (uguo *UsersGroupsUpdateOne) SetRoles(g *Group) *UsersGroupsUpdateOne {
	return uguo.SetRolesID(g.ID)
}

// Mutation returns the UsersGroupsMutation object of the builder.
func (uguo *UsersGroupsUpdateOne) Mutation() *UsersGroupsMutation {
	return uguo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uguo *UsersGroupsUpdateOne) ClearUser() *UsersGroupsUpdateOne {
	uguo.mutation.ClearUser()
	return uguo
}

// ClearRoles clears the "roles" edge to the Group entity.
func (uguo *UsersGroupsUpdateOne) ClearRoles() *UsersGroupsUpdateOne {
	uguo.mutation.ClearRoles()
	return uguo
}

// Where appends a list predicates to the UsersGroupsUpdate builder.
func (uguo *UsersGroupsUpdateOne) Where(ps ...predicate.UsersGroups) *UsersGroupsUpdateOne {
	uguo.mutation.Where(ps...)
	return uguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uguo *UsersGroupsUpdateOne) Select(field string, fields ...string) *UsersGroupsUpdateOne {
	uguo.fields = append([]string{field}, fields...)
	return uguo
}

// Save executes the query and returns the updated UsersGroups entity.
func (uguo *UsersGroupsUpdateOne) Save(ctx context.Context) (*UsersGroups, error) {
	return withHooks[*UsersGroups, UsersGroupsMutation](ctx, uguo.sqlSave, uguo.mutation, uguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uguo *UsersGroupsUpdateOne) SaveX(ctx context.Context) *UsersGroups {
	node, err := uguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uguo *UsersGroupsUpdateOne) Exec(ctx context.Context) error {
	_, err := uguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uguo *UsersGroupsUpdateOne) ExecX(ctx context.Context) {
	if err := uguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uguo *UsersGroupsUpdateOne) check() error {
	if _, ok := uguo.mutation.UserID(); uguo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UsersGroups.user"`)
	}
	if _, ok := uguo.mutation.RolesID(); uguo.mutation.RolesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UsersGroups.roles"`)
	}
	return nil
}

func (uguo *UsersGroupsUpdateOne) sqlSave(ctx context.Context) (_node *UsersGroups, err error) {
	if err := uguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersgroups.Table, usersgroups.Columns, sqlgraph.NewFieldSpec(usersgroups.FieldID, field.TypeInt))
	id, ok := uguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UsersGroups.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersgroups.FieldID)
		for _, f := range fields {
			if !usersgroups.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usersgroups.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uguo.mutation.CreatedAt(); ok {
		_spec.SetField(usersgroups.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uguo.mutation.UpdatedAt(); ok {
		_spec.SetField(usersgroups.FieldUpdatedAt, field.TypeTime, value)
	}
	if uguo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersgroups.UserTable,
			Columns: []string{usersgroups.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uguo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersgroups.UserTable,
			Columns: []string{usersgroups.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uguo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersgroups.RolesTable,
			Columns: []string{usersgroups.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uguo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersgroups.RolesTable,
			Columns: []string{usersgroups.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UsersGroups{config: uguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersgroups.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uguo.mutation.done = true
	return _node, nil
}
